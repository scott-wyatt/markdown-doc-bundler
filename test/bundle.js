module.exports = {
  "README.md": "[![Trails.js][trails-image]][trails-url]\nTrails Documentation\n=====================\n[![Gitter][gitter-image]][gitter-url]\n[![npm](https://img.shields.io/npm/l/trails.svg?style=flat-square)](https://www.npmjs.com/package/trails)\n\n[![Issue Stats][issuestats-image]][issuestats-url]\n[![Issue StatsPR][issuestatspr-image]][issuestatspr-url]\n[![npm](https://img.shields.io/npm/dm/trails.svg?style=flat-square)](https://www.npmjs.com/package/trails)\n[![Inline docs](http://inch-ci.org/github/trailsjs/trails.svg?branch=master)](http://inch-ci.org/github/trailsjs/trails)\n\n\n\nThe official documentation for the current stable release of Trails is on the master branch.\n\n## Available Languages\nThe documentation for Trails is translated to an number of different languages.\nThe following list link to those different translations of the Trails documentation:\n\n| Language                     | [IETF Language Tag](https://en.wikipedia.org/wiki/IETF_language_tag)  | Maintainer        | Repo                               |\n| ---------------------------- | ------- | ------------------ | ---------------------------------- |\n| French                     | `fr`    | [@jaumard](https://github.com/jaumard)  [@maissani](https://github.com/maissani)    | [trails-docs-fr](lang/fr/README.md)\n\n\n## Table of Contents\n\n* [Introduction](introduction/introduction.md)\n  * [Installation](introduction/installation.md)\n  * [Getting Started](introduction/getting-started.md)\n* Framework\n  * [Anatomy](/anatomy/README.md)\n  * [Concepts](/concepts/README.md)\n  * Core Components\n  * Examples\n  * [User Guides](/guides/README.md)\n* Trailpack Docs\n  * [Official Trailpack](/trailpack/official/README.md)\n  * Community Trailpack\n\n\nRoadmap\n------------\n* [Current Roadmap](https://github.com/trailsjs/trails/blob/master/ROADMAP.md)\n\n\nContributing\n------------\n\nWe love contributors! For more information on how you can contribute to the\nTrails documentation, please read\n[Contributing Guide](contributing/README.md)\n\nLicense\n------------\n[MIT](LICENSE)\n<img src=\"http://i.imgur.com/dCjNisP.png\">\n\n[trails-image]: http://i.imgur.com/zfT2NEv.png\n[trails-url]: http://trailsjs.io\n[gitter-image]: http://img.shields.io/badge/+%20GITTER-JOIN%20CHAT%20%E2%86%92-1DCE73.svg?style=flat-square\n[gitter-url]: https://gitter.im/trailsjs/trails\n[issuestats-image]: http://issuestats.com/github/trailsjs/trails-docs/badge/issue?style=flat-square\n[issuestats-url]: http://issuestats.com/github/trailsjs/trails-docs\n[issuestatspr-image]: http://issuestats.com/github/trailsjs/trails-docs/badge/pr?style=flat-square\n[issuestatspr-url]: http://issuestats.com/github/trailsjs/trails-docs\n",
  "anatomy": {
    "README.md": "# Anatomy\n###### Trails Anatomy\nThis folder describe the anatomy of Trails\n\n## Let's Strart The Anatomy Guide\n\n### Path: \n\n> [TrailsProject/](./trailsProject/README.md)\n",
    "trailsProject": {
      "README.md": "# Anatomy\n###### Trails Anatomy\n\n## Tags\n``root directory```\n\n## Where am I ?\n\nIn the root project directory.\n\nThis is the place where you have launch the ```yo trails``` command\n\n### Path:\n\n>  [api/](api/README.md)\n\n> config/\n\n> node_modules/\n\n> .editorconfig\n\n> .gitignore\n\n> .trailsrc\n\n> index.js\n\n> LICENCE\n\n> package.json\n\n> README.md\n\n> server.js\n",
      "api": {
        "README.md": "# Anatomy\n###### Trails Anatomy\n\n## Tags\n``root directory```\n\n## Where am I ?\n\nThe API directory, controllers, models, and all your custom logic and datastructure should be contained there. \n\n### Path:\n\n> controllers/\n\n> models/\n\n> policies/\n\n> services/\n\n> index.js\n"
      }
    }
  },
  "concepts": {
    "README.md": "# Concepts\nIn this section, you will see, trails functionalities, mechanisms, and explainations to understand what's behind the hood.\n\n###### Trails Concepts\n\n\n> Configuration\n\n> Controllers\n\n> Dependency Injection\n\n> Environments\n\n> Footprints\n\n> Internationalization\n\n> Models\n\n> Modularity\n\n> ORM\n\n> [Policies] (policies/README.md)\n\n> Routing\n\n> Services\n\n> Sessions\n\n> Trailpacks\n\n> WebServers\n",
    "orm": {
      "README.md": "# ORM\n## What's an ORM ?\n\n\n## What is Waterline ORM ?\n\n## SGBD List\n\n![Project generated](/assets/img/sgbd/mysql.png)![Project generated](/assets/img/sgbd/mongodb.png)![Project generated](/assets/img/sgbd/postgres.png)![Project generated](/assets/img/sgbd/redis.jpg)\n"
    },
    "policies": {
      "README.md": "# Policies\n\n\n\n## What is a Policy\n\n### Introduction\nA Policy is <strong>function</strong>, that executed before accessing <strong>Controllers</strong>.\nWith Policies you can setup <strong>access controll</strong>, <strong>autorization</strong> or any <strong>processing</strong> that can be done before accessing controller function.\n\nYou can use Policies for whatever you want, there is no convention.\n\n### Examples\n\n#### Authorization Example\n\nFor a policy that named isAdmin, we could write a function that allow access if user is admin and return a 403 if user is not an admin.\n\n#### Auth & Processing Example\n\nAn other example can be a processing before access the controller, like refreshTokens, that automaticaly refresh authentication tokens for a user, if the user has not disconect from app, have same ip and has an outdated token that is valid, the result can be let accessing controllers or return a 403 if the user has disconected.    \n\n## How to use it in Trails\n\n### Fastest Way : Use Yeoman\n\n```Bash\n  yo trails:policy ExamplePolicy\n```\n\nWith Yeoman you don't need to create the file and include it in index.js\n\n### First Step : Write your policy\n\nThe convention is that policies has to be written in api/policies.\n\n#### 1 - Using Hapi\n\n```JavaScript\n  'use strict'\n  const Policy = require('trails-policy')\n\n  /**\n   * @module ExamplePolicy\n   * @description This is the example policy\n   */\n  module.exports = class ExamplePolicy extends Policy {\n    test(request, reply) {\n      const secret = request.params.secret\n      // Your own logic\n      /**\n      * The following code is an example:\n      * It stop when the secret parametter is passed and continue to the Controller when there is no secret parametter.\n      */\n      if (secret != '') {\n        // Stop and return with a custom message\n        return reply('Your secret is' + secret)\n      }\n      // Continue to Example Controller\n      reply()\n    }\n  }\n```\n\n#### 2 - Using Express\n\n```JavaScript\n'use strict'\n const Policy = require('trails-policy')\n\n /**\n  * @module ExamplePolicy\n  * @description This is the example policy\n  */\n module.exports = class ExamplePolicy extends Policy {\n   test(req, res, next) {\n     const secret = req.body.secret\n     // Your own logic\n     /**\n     * The following code is an example:\n     * It stop when the secret parametter is passed and continue to the Controller when there is no secret parametter.\n     */\n     if (secret != '') {\n       // Stop and return with a custom message\n       return res.send('Your secret is' + secret)\n     }\n     // Continue to Example Controller\n     next()\n   }\n }\n```\n### Second Step : Load your policy\n\n```JavaScript\n/**\n * FILE: api/policies/index.js\n */\n\n 'use strict'\n\n module.exports = {}\n exports.Example = require('./Example')\n\n```\n\n### Third Step : Declare your policy in config the file\n\n```JavaScript\n/**\n * FILE: config/policies.js\n * The following Policies are example of what you can do with Trails Policies\n */\n\n module.exports = {\n\n   // Apply on every controllers\n   '*': ['ExamplePolicy.test'],\n\n   ExampleController: {\n     // Unique policy for one controller function\n     test: [ 'ExamplePolicy.test' ],\n     // Before accessing multiple function in ExampleController, processing multiple policies example:\n     multiple: ['ExamplePolicy.test', 'ExamplePolicy.testfoo', 'ExamplePolicy.testbar'],\n   },\n   /**\n    * Controller Policies that applies on each function under a specific controller\n    */\n\n   DefaultController: ['AccessPolicy.logger'],\n   /**\n    * Boolean & wilcard policies\n    * true -> Unrestricted access\n    * False -> Restrict Every Time\n    */\n\n    CatsController: {\n      // Always access to controller function\n      miaou: true,\n      // Restrict access to controller function\n      purr: false,\n      // Apply every policies processing before accessing function\n      test: '*'\n    }\n }\n```\n"
    }
  }
}
